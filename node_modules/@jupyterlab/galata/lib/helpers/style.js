"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.StyleHelper = void 0;
/**
 * CSS Style analysis helpers
 */
class StyleHelper {
    constructor(page) {
        this.page = page;
    }
    /**
     * Collect all CSS selectors on page.
     */
    async collectAllSelectors() {
        return this.page.evaluate(() => [...document.querySelectorAll('style')]
            .filter(style => style.sheet !== null)
            .map(style => [...style.sheet.cssRules])
            .flat()
            .filter((rule) => rule instanceof CSSStyleRule)
            .map((rule) => rule.selectorText));
    }
    /**
     * Find unused CSS rules.
     *
     * @param options specify which rules to include/exclude.
     * @returns List of rules with no matching elements on the page.
     */
    async findUnusedStyleRules(options) {
        let exclude = typeof options.exclude !== 'undefined' ? options.exclude : [];
        if (!options.includeModifiers) {
            exclude = [...exclude, ...['.jp-mod-', '.lm-mod-']];
        }
        const relevantRules = (await this.collectAllSelectors())
            // detection of pseudo-elements with `document.querySelector` is impossible,
            // so we just check their parents
            .map(selector => selector.replace(/::?(after|before|backdrop|cue|cue-region|first-letter|first-line|file-selector-button|marker|placeholder|selection)/, ''))
            .filter(selector => options.includePseudoClasses ? true : !selector.match(/:\w+/))
            .filter(selector => options.fragments.some(fragment => selector.includes(fragment)))
            .filter(selector => !exclude.some(fragment => selector.includes(fragment)));
        const potentiallyUnusedRules = await this.page.evaluate(relevantRules => relevantRules.filter(selector => document.querySelector(selector) == null), relevantRules);
        if (potentiallyUnusedRules.length !== 0) {
            console.log(potentiallyUnusedRules.length, 'out of', relevantRules.length, 'CSS rules for', options.fragments, 'may be unused:', potentiallyUnusedRules);
        }
        return potentiallyUnusedRules;
    }
}
exports.StyleHelper = StyleHelper;
//# sourceMappingURL=style.js.map