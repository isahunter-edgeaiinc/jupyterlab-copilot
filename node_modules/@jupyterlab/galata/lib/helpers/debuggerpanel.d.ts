import { ElementHandle, Locator, Page } from '@playwright/test';
import { SidebarHelper } from './sidebar';
import { NotebookHelper } from './notebook';
/**
 * Debugger Helper
 */
export declare class DebuggerHelper {
    readonly page: Page;
    readonly sidebar: SidebarHelper;
    readonly notebook: NotebookHelper;
    constructor(page: Page, sidebar: SidebarHelper, notebook: NotebookHelper);
    /**
     * Returns true if debugger toolbar item is enabled, false otherwise
     *
     * @param name Notebook name
     */
    isOn(name?: string): Promise<boolean>;
    /**
     * Enables the debugger toolbar item
     *
     * @param name Notebook name
     */
    switchOn(name?: string): Promise<void>;
    /**
     * Disables the debugger toolbar item
     *
     * @param name Notebook name
     */
    switchOff(name?: string): Promise<void>;
    /**
     *  Returns true if debugger panel is open, false otherwise
     */
    isOpen(): Promise<boolean>;
    /**
     * Returns handle to the variables panel content
     *
     * @deprecated You should use locator instead {@link getVariablesPanelLocator}
     */
    getVariablesPanel(): Promise<ElementHandle<Element> | null>;
    /**
     * Returns locator to the variables panel content
     */
    getVariablesPanelLocator(): Promise<Locator>;
    /**
     * Waits for variables to be populated in the variables panel
     */
    waitForVariables(): Promise<void>;
    /**
     * render variable
     */
    renderVariable(name: string): Promise<void>;
    /**
     * Returns handle to callstack panel content
     *
     * @deprecated You should use locator instead {@link getCallStackPanelLocator}
     */
    getCallStackPanel(): Promise<ElementHandle<Element> | null>;
    /**
     * Returns locator to callstack panel content
     */
    getCallStackPanelLocator(): Promise<Locator>;
    /**
     * Waits for the callstack body to populate in the callstack panel
     */
    waitForCallStack(): Promise<void>;
    /**
     * Returns handle to breakpoints panel content
     *
     * @deprecated You should use locator instead {@link getBreakPointsPanelLocator}
     */
    getBreakPointsPanel(): Promise<ElementHandle<Element> | null>;
    /**
     * Returns locator to breakpoints panel content
     */
    getBreakPointsPanelLocator(): Promise<Locator>;
    /**
     * Waits for the breakpoints to appear in the breakpoints panel
     */
    waitForBreakPoints(): Promise<void>;
    /**
     * Returns handle to sources panel content
     *
     * @deprecated You should use locator instead {@link getSourcePanelLocator}
     */
    getSourcePanel(): Promise<ElementHandle<Element> | null>;
    /**
     * Returns locator to sources panel content
     */
    getSourcePanelLocator(): Promise<Locator>;
    /**
     * Waits for sources to be populated in the sources panel
     */
    waitForSources(): Promise<void>;
    private _getPanel;
}
